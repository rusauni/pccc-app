import '../editor_js.dart';

/// V√≠ d·ª• s·ª≠ d·ª•ng EditorJS Parser
class EditorJSExample {
  /// D·ªØ li·ªáu JSON m·∫´u t·ª´ EditorJS
  static const String sampleJsonString = '''
{
  "time": 1550476186479,
  "blocks": [
    {
      "id": "oUq2g_tl8y",
      "type": "header",
      "data": {
        "text": "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng EditorJS Parser",
        "level": 1
      }
    },
    {
      "id": "zbGZFPM-iI",
      "type": "paragraph",
      "data": {
        "text": "ƒê√¢y l√† m·ªôt ƒëo·∫°n vƒÉn b·∫£n m√¥ t·∫£ v·ªÅ c√°ch s·ª≠ d·ª•ng EditorJS Parser trong Flutter."
      }
    },
    {
      "id": "qYIGsjS5rt", 
      "type": "header",
      "data": {
        "text": "C√°c t√≠nh nƒÉng ch√≠nh",
        "level": 2
      }
    },
    {
      "id": "XV87kJS_H1",
      "type": "list",
      "data": {
        "style": "unordered",
        "items": [
          "Parse JSON t·ª´ EditorJS",
          "H·ªó tr·ª£ nhi·ªÅu lo·∫°i block",
          "Type-safe v·ªõi Dart models",
          "Utilities ƒë·ªÉ l√†m vi·ªác v·ªõi data"
        ]
      }
    },
    {
      "id": "cyZjplMOZ0",
      "type": "quote",
      "data": {
        "text": "EditorJS t·∫°o ra JSON s·∫°ch thay v√¨ HTML markup ph·ª©c t·∫°p.",
        "caption": "T√°c gi·∫£ EditorJS"
      }
    },
    {
      "id": "codeblock123",
      "type": "code",
      "data": {
        "code": "final data = EditorJSParser.parseFromString(jsonString);\\nprint('T·ªïng s·ªë blocks: \${data.blocks.length}');"
      }
    },
    {
      "id": "delimiter123",
      "type": "delimiter",
      "data": {}
    },
    {
      "id": "table123",
      "type": "table",
      "data": {
        "withHeadings": true,
        "content": [
          ["Block Type", "M√¥ t·∫£"],
          ["paragraph", "ƒêo·∫°n vƒÉn b·∫£n"],
          ["header", "Ti√™u ƒë·ªÅ t·ª´ H1-H6"],
          ["list", "Danh s√°ch c√≥ th·ª© t·ª± ho·∫∑c kh√¥ng"],
          ["image", "H√¨nh ·∫£nh v·ªõi caption"],
          ["quote", "Tr√≠ch d·∫´n"],
          ["code", "Kh·ªëi m√£"],
          ["table", "B·∫£ng d·ªØ li·ªáu"]
        ]
      }
    }
  ],
  "version": "2.8.1"
}
''';

  /// V√≠ d·ª• c∆° b·∫£n v·ªÅ c√°ch parse v√† s·ª≠ d·ª•ng
  static void basicExample() {
    print('=== V√ç D·ª§ C∆† B·∫¢N ===\n');
    
    // 1. Parse JSON string
    final editorData = EditorJSParser.parseFromString(sampleJsonString);
    print('‚úÖ Parse th√†nh c√¥ng!');
    print('T·ªïng s·ªë blocks: ${editorData.blocks.length}');
    print('Version: ${editorData.version}');
    print('Time: ${DateTime.fromMillisecondsSinceEpoch(editorData.time ?? 0)}');
    
    // 2. L·∫•y summary
    final summary = EditorJSParser.createSummary(editorData);
    print('\nüìä SUMMARY:');
    print('- T·ªïng blocks: ${summary.totalBlocks}');
    print('- C√≥ headers: ${summary.hasHeaders}');
    print('- C√≥ images: ${summary.hasImages}');
    print('- C√≥ tables: ${summary.hasTables}');
    print('- C√≥ code: ${summary.hasCode}');
    print('- Block counts: ${summary.blockCounts}');
    
    // 3. L·∫•y c√°c lo·∫°i block
    final blockTypes = EditorJSParser.getBlockTypes(editorData);
    print('\nüìù BLOCK TYPES: ${blockTypes.join(', ')}');
  }

  /// V√≠ d·ª• l√†m vi·ªác v·ªõi t·ª´ng lo·∫°i block
  static void blockTypesExample() {
    print('\n=== V√ç D·ª§ BLOCK TYPES ===\n');
    
    final editorData = EditorJSParser.parseFromString(sampleJsonString);
    
    for (int i = 0; i < editorData.blocks.length; i++) {
      final block = editorData.blocks[i];
      print('Block ${i + 1}: ${block.type} (ID: ${block.id})');
      
      switch (block.type) {
        case 'paragraph':
          final paragraphData = EditorJSParser.parseBlockData<ParagraphBlockData>(block);
          print('  üìÑ Text: "${paragraphData.text}"');
          break;
          
        case 'header':
          final headerData = EditorJSParser.parseBlockData<HeaderBlockData>(block);
          print('  üìå H${headerData.level}: "${headerData.text}"');
          break;
          
        case 'list':
          final listData = EditorJSParser.parseBlockData<ListBlockData>(block);
          print('  üìã ${listData.style} list (${listData.items.length} items):');
          for (final item in listData.items) {
            print('    - $item');
          }
          break;
          
        case 'quote':
          final quoteData = EditorJSParser.parseBlockData<QuoteBlockData>(block);
          print('  üí¨ Quote: "${quoteData.text}"');
          if (quoteData.caption != null) {
            print('     Caption: "${quoteData.caption}"');
          }
          break;
          
        case 'code':
          final codeData = EditorJSParser.parseBlockData<CodeBlockData>(block);
          print('  üíª Code:');
          print('     ${codeData.code}');
          break;
          
        case 'delimiter':
          print('  ‚ûñ Delimiter');
          break;
          
        case 'table':
          final tableData = EditorJSParser.parseBlockData<TableBlockData>(block);
          print('  üìä Table (${tableData.content.length} rows):');
          for (int r = 0; r < tableData.content.length; r++) {
            final row = tableData.content[r];
            final isHeader = tableData.withHeadings == true && r == 0;
            print('     ${isHeader ? "HEADER" : "Row ${r + 1}"}: ${row.join(" | ")}');
          }
          break;
          
        default:
          print('  ‚ùì Unknown block type');
      }
      
      print('');
    }
  }

  /// V√≠ d·ª• utilities
  static void utilitiesExample() {
    print('\n=== V√ç D·ª§ UTILITIES ===\n');
    
    final editorData = EditorJSParser.parseFromString(sampleJsonString);
    
    // 1. T√¨m ki·∫øm
    final searchResults = EditorJSUtils.searchBlocks(editorData, 'EditorJS');
    print('üîç T√¨m ki·∫øm "EditorJS": ${searchResults.length} k·∫øt qu·∫£');
    
    // 2. ƒê·∫øm t·ª´ v√† k√Ω t·ª±
    final wordCount = EditorJSUtils.countWords(editorData);
    final charCount = EditorJSUtils.countCharacters(editorData);
    print('üìä Th·ªëng k√™:');
    print('  - T·ªïng s·ªë t·ª´: $wordCount');
    print('  - T·ªïng s·ªë k√Ω t·ª±: $charCount');
    
    // 3. L·∫•y headers
    final headers = EditorJSUtils.getHeaders(editorData);
    print('\nüìë Headers:');
    for (final header in headers) {
      print('  H${header.level}: "${header.text}" (index: ${header.index})');
    }
    
    // 4. Table of contents
    final toc = EditorJSUtils.generateTableOfContents(editorData);
    print('\nüìö Table of Contents:');
    for (final item in toc) {
      final indent = '  ' * (item.level - 1);
      print('${indent}- ${item.text}');
    }
    
    // 5. L·∫•y image URLs
    final imageUrls = EditorJSUtils.getImageUrls(editorData);
    print('\nüñºÔ∏è Image URLs: ${imageUrls.length} images');
    for (final url in imageUrls) {
      print('  - $url');
    }
  }

  /// V√≠ d·ª• t·∫°o blocks m·ªõi
  static void buildersExample() {
    print('\n=== V√ç D·ª§ BLOCK BUILDERS ===\n');
    
    // T·∫°o EditorJSData m·ªõi
    var data = EditorJSUtils.createEmpty();
    print('‚úÖ T·∫°o EditorJSData r·ªóng');
    
    // Th√™m c√°c blocks
    data = EditorJSUtils.addBlock(data, EditorJSBlockBuilders.header('Ti√™u ƒë·ªÅ ch√≠nh', 1));
    data = EditorJSUtils.addBlock(data, EditorJSBlockBuilders.paragraph('ƒê√¢y l√† ƒëo·∫°n vƒÉn ƒë·∫ßu ti√™n.'));
    data = EditorJSUtils.addBlock(data, EditorJSBlockBuilders.list(['Item 1', 'Item 2', 'Item 3']));
    data = EditorJSUtils.addBlock(data, EditorJSBlockBuilders.quote('C√¢u tr√≠ch d·∫´n quan tr·ªçng', caption: 'T√°c gi·∫£'));
    data = EditorJSUtils.addBlock(data, EditorJSBlockBuilders.code('print("Hello World!");'));
    data = EditorJSUtils.addBlock(data, EditorJSBlockBuilders.delimiter());
    
    print('‚úÖ ƒê√£ th√™m ${data.blocks.length} blocks');
    
    // Chuy·ªÉn th√†nh JSON
    final jsonString = EditorJSParser.toJsonString(data);
    print('\nüìÑ JSON output:');
    print(jsonString);
  }

  /// V√≠ d·ª• manipulation data
  static void manipulationExample() {
    print('\n=== V√ç D·ª§ MANIPULATION ===\n');
    
    var data = EditorJSParser.parseFromString(sampleJsonString);
    print('‚úÖ B·∫Øt ƒë·∫ßu v·ªõi ${data.blocks.length} blocks');
    
    // X√≥a block ƒë·∫ßu ti√™n
    data = EditorJSUtils.removeBlockAt(data, 0);
    print('üóëÔ∏è X√≥a block ƒë·∫ßu ti√™n, c√≤n l·∫°i: ${data.blocks.length} blocks');
    
    // Th√™m block m·ªõi v√†o ƒë·∫ßu
    final newHeader = EditorJSBlockBuilders.header('Ti√™u ƒë·ªÅ m·ªõi', 1);
    data = EditorJSData(
      time: data.time,
      blocks: [newHeader, ...data.blocks],
      version: data.version,
    );
    print('‚ûï Th√™m header m·ªõi v√†o ƒë·∫ßu, t·ªïng: ${data.blocks.length} blocks');
    
    // Di chuy·ªÉn block
    data = EditorJSUtils.moveBlock(data, 1, 3);
    print('üîÑ Di chuy·ªÉn block t·ª´ v·ªã tr√≠ 1 ƒë·∫øn 3');
    
    // T√¨m block theo ID
    final firstBlock = data.blocks.first;
    final foundBlock = EditorJSUtils.findBlockById(data, firstBlock.id!);
    print('üîç T√¨m block theo ID: ${foundBlock != null ? "T√¨m th·∫•y" : "Kh√¥ng t√¨m th·∫•y"}');
    
    // Clone data
    final clonedData = EditorJSUtils.clone(data);
    print('üìã Clone data th√†nh c√¥ng, blocks: ${clonedData.blocks.length}');
  }

  /// Ch·∫°y t·∫•t c·∫£ v√≠ d·ª•
  static void runAllExamples() {
    basicExample();
    blockTypesExample();
    utilitiesExample();
    buildersExample();
    manipulationExample();
    
    print('\nüéâ Ho√†n th√†nh t·∫•t c·∫£ v√≠ d·ª•!');
  }
} 